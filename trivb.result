findtype
makefuncall
makeop
 token 94132438344576  OP            <=  dtype  0  link 0  operands 0
copytok
 token 94132438344640  ID             i  dtype  0  link 94132438343936
copytok
 token 94132438344704  ID             i  dtype  0  link 94132438343936
copytok
 token 94132438344768  ID             i  dtype  0  link 94132438343936
makeop
 token 94132438344832  OP            :=  dtype  0  link 0  operands 0
makeop
 token 94132438344896  OP             +  dtype  0  link 0  operands 0
makefor
 token 94132438343744  OP         progn  dtype  0  link 0  operands 94132438343872
makeprogram
Symbol table level 0
 94132438303328        real  BASIC  basicdt   1          siz     8
 94132438303424     integer  BASIC  basicdt   0          siz     4
 94132438303520        char  BASIC  basicdt   2          siz     1
 94132438303616     boolean  BASIC  basicdt   3          siz     4
 94132438303712         exp  knd 5 0  typ 94132438303808  lvl  0  siz     0  off     0
(FUNCTION real
          real)
 94132438304000       trexp  knd 5 0  typ 94132438304096  lvl  0  siz     0  off     0
(FUNCTION real
          real)
 94132438304288         sin  knd 5 0  typ 94132438304384  lvl  0  siz     0  off     0
(FUNCTION real
          real)
 94132438304576         cos  knd 5 0  typ 94132438304672  lvl  0  siz     0  off     0
(FUNCTION real
          real)
 94132438304864       trsin  knd 5 0  typ 94132438304960  lvl  0  siz     0  off     0
(FUNCTION real
          real)
 94132438305152        sqrt  knd 5 0  typ 94132438305248  lvl  0  siz     0  off     0
(FUNCTION real
          real)
 94132438305440       round  knd 5 0  typ 94132438305536  lvl  0  siz     0  off     0
(FUNCTION real
          real)
 94132438305728      iround  knd 5 0  typ 94132438305824  lvl  0  siz     0  off     0
(FUNCTION integer
          real)
 94132438306016         ord  knd 5 0  typ 94132438306112  lvl  0  siz     0  off     0
(FUNCTION integer
          integer)
 94132438306304         new  knd 5 0  typ 94132438306400  lvl  0  siz     0  off     0
(FUNCTION integer
          integer)
 94132438306592       trnew  knd 5 0  typ 94132438306688  lvl  0  siz     0  off     0
(FUNCTION integer
          integer)
 94132438306880       write  knd 5 0  typ 94132438306976  lvl  0  siz     0  off     0
(FUNCTION NULL
          char)
 94132438307168     writeln  knd 5 0  typ 94132438307264  lvl  0  siz     0  off     0
(FUNCTION NULL
          char)
 94132438307456      writef  knd 5 0  typ 94132438307552  lvl  0  siz     0  off     0
(FUNCTION NULL
          real)
 94132438307744    writelnf  knd 5 0  typ 94132438307840  lvl  0  siz     0  off     0
(FUNCTION NULL
          real)
 94132438308032      writei  knd 5 0  typ 94132438308128  lvl  0  siz     0  off     0
(FUNCTION NULL
          integer)
 94132438308320    writelni  knd 5 0  typ 94132438308416  lvl  0  siz     0  off     0
(FUNCTION NULL
          integer)
 94132438308608        read  knd 5 0  typ 94132438308704  lvl  0  siz     0  off     0
(FUNCTION NULL
          NULL)
 94132438308896      readln  knd 5 0  typ 94132438308992  lvl  0  siz     0  off     0
(FUNCTION NULL
          NULL)
 94132438309184         eof  knd 5 0  typ 94132438309280  lvl  0  siz     0  off     0
(FUNCTION boolean
          NULL)
Symbol table level 1
 94132438343232           i  VAR    0 typ integer  lvl  1  siz     4  off     0
 94132438343328         lim  VAR    0 typ integer  lvl  1  siz     4  off     4
yyparse result =        0
(program graph1 (progn output)
                (progn (:= lim 7)
                       (progn (:= i 0)
                              (label 0)
                              (if (<= i lim)
                                  (progn (funcall writeln '*')
                                         (:= i (+ i 1))
                                         (goto 0))))))
# ---------------- Beginning of Generated Code --------------------
        .file   "foo"
        .text
        .globl graph1
        .type   graph1, @function
graph1:
.LFB0:
	.cfi_startproc
	pushq	%rbp              # save base pointer on stack
	.cfi_def_cfa_offset 16
	movq	%rsp, %rbp        # move stack pointer to base pointer
	.cfi_offset 6, -16
	.cfi_def_cfa_register 6
        subq	$32, %rsp 	  # make space for this stack frame
	movq	%rbx, %r9        # save %rbx (callee-saved) in %r9
# ------------------------- begin Your code -----------------------------
	movl	$7,%eax         	#  7 -> %eax
	movl	%eax,-28(%rbp)     	#  %eax -> lim
	movl	$0,%eax         	#  0 -> %eax
	movl	%eax,-32(%rbp)     	#  %eax -> i
.L0:
	movl	-32(%rbp),%eax     	#  i -> %eax
	movl	-28(%rbp),%ecx     	#  lim -> %ecx
	cmpl	%ecx,%eax           	#  compare %eax - %ecx
	jle	.L2 			#  jump if     <=
	jmp	.L3 			#  jump 
.L2:
	leaq	.LC4(%rip),%rdi  	#  addr of literal .LC4
	call	writeln@PLT          	#  writeln()
	movl	-32(%rbp),%eax     	#  i -> %eax
	movl	$1,%ecx         	#  1 -> %ecx
	addl	%ecx,%eax         	#  %eax + %ecx -> %eax
	movl	%eax,-32(%rbp)     	#  %eax -> i
	jmp	.L0 			#  jump 
.L3:
# ----------------------- begin Epilogue code ---------------------------
	movq	%r9, %rbx        # restore %rbx (callee-saved) from %r9
        leave
        ret
        .cfi_endproc
.LFE0:
        .size   graph1, .-graph1
# ----------------- end Epilogue; Literal data follows ------------------
        .section        .rodata
	.align  4
.LC4:
	.string	"*"

        .ident  "CS 375 Compiler - Summer 2022"
